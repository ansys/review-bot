chatGPTInstruction:984+
+void PrimeFileIO::GenerateVolumePyFile()
+{
+    std::stringstream ss;
+    ss << primeFolderPath() << "/generateVolume_" << m_meshConstruction->uniqueBaseIdentifier() << ".py";
+    std::ofstream out(ss.str());
+    // prime config finalize api: prime.finalize()
+    // push it once it is working for me..
+    // It should be called in the end..of py script
+
+    /*Import all the PRIME meshing functionality*/
+    out << "import ansys.meshing.prime as prime" << std::endl;
+    out << "import PrimePyAnsysPrimeServer" << std::endl;
+    out << "import os\n"
+        << "model = prime.local_model()\n"
+        << "fileIO = prime.FileIO(model)" << std::endl;
+
+    /*Read the boundary file and use the prime.AutoMesh()... to mesh it*/
+    out << "fileIO.import_fluent_case(os.path.join(\"" << dockerWorkDir().c_str() << "\",\"" << m_boundaryMeshFileName.c_str()
+        << "\"), prime.ImportFluentCaseParams(model = model))" << std::endl;
+    out << "results = prime.AutoMesh(model=model).mesh(part_id=model.parts[0].id, automesh_params=prime.AutoMeshParams(model=model))" << std::endl;
+
+    /*Write them into the pmdat file using prime.write_pmdat()... */
+    out << "fileIO.write_pmdat(os.path.join(\"" << dockerWorkDir().c_str() << "\",\""
+        << "volumeMesh_" << m_meshConstruction->uniqueBaseIdentifier() << "_fromPrime.pmdat"
+        << "\"), prime.FileWriteParams(model))" << std::endl;
+
+    /*calling Prime.Finalize()*/
+    out << "PrimePyAnsysPrimeServer.Finalize()" << std::endl;
+}
