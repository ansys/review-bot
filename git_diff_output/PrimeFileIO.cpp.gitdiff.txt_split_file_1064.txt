chatGPTInstruction:1014+
+void PrimeFileIO::CreatePrimeShellScript()
+{
+
+    /* OLD CODE
+    std::stringstream ss;
+    ss << m_meshConstruction->occData()->getDebugOutputPath() << "/runPrimeImage_" << unique_name << ".sh";
+    */
+
+    // NEW CODE
+    std::stringstream ss;
+    ss << primeFolderPath() << "/runPrimeImage_" << m_meshConstruction->uniqueBaseIdentifier() << ".sh";
+    std::ofstream out(ss.str());
+    std::string unique_name =
+        m_meshConstruction->occData()->getOriginalFileBaseName() + "_" + std::to_string(m_meshConstruction->uniqueBaseIdentifier());
+
+    out << "#!/bin/bash\n" << std::endl;
+    out << "# Run the Docker command inside the container" << std::endl;
+
+    out << "docker run --rm --name running_prime_container_" << unique_name << " -v " << m_meshConstruction->occData()->getAbsoluteDebugOutputPath()
+        << "/prime"
+        << ":"
+        << "/local/workdir";
+
+    // if PRIME DOCKER is running outside the DOCKER ENV...
+    if (isDOOD())
+        out << " --volumes-from Linux ";
+
+    // out << " -e ANSYSLMD_LICENSE_FILE=1055@milflexlm1.ansys.com"
+    out << " -e ANSYS_ELASTIC_CLS=M3HAH4PTNKVK:623041"
+        << " --entrypoint /prime/meshing/Prime/runPrime.sh local_prime " << dockerWorkDir() << "/generateVolume_"
+        << m_meshConstruction->uniqueBaseIdentifier() << ".py";
+
+    out << " > " << m_meshConstruction->occData()->getAbsoluteDebugOutputPath() << "/prime/primeLog.txt 2>&1";
+    out << std::endl;
+}
