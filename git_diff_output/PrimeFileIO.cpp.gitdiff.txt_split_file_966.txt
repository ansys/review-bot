chatGPTInstruction:916+
+void PrimeFileIO::WritePrimeData(FILE *fw, const cm2::intersect_t3::mesher::data_type &dataAllRemeshed)
+{
+    /*WRITE CELLS AND EDGES*/
+    int iN = (int)dataAllRemeshed.pos.cols();
+    int iT = (int)dataAllRemeshed.connectM.cols();
+
+    /*COLOR INFORMATION PROCESSING */
+    int iC = (int)dataAllRemeshed.colors.size();
+    // printf( "the iC value is : %d & the iT value is : %d", iC, iT);    //iC and iT remains the same and we can proceed
+
+    /*map creation for reverse mapping triangle id's for specific colors*/
+    std::map<int, std::vector<int>> color2section;
+
+    /*the loop will populate the map*/
+    for (int i = 0; i < iC; i++)
+    {
+        color2section[dataAllRemeshed.colors(i)].push_back(i);
+    }
+
+    /*proposed id for node thread*/
+    int node_id = color2section.size() + 1;
+
+    /*check for proposed id to be unique*/
+    while (color2section.find(node_id) != color2section.end())
+    {
+        node_id++;
+    }
+
+    /*writing them into the pmdat file*/
+    unsigned int count = 1, vSize;
+
+    /*PMDAT FILE*/
+    fprintf(fw, "(10 (0 1 %x 0))\n(13 (0 1 %x 0))\n(12 (0 0 0 0))\n", iN, iT);
+    fprintf(fw, "(10 (%d 1 %x 2 3)\n(\n", node_id, iN);
+    for (int i = 0; i < iN; i++)
+    {
+
+        fprintf(fw, "%f %f %f\n", dataAllRemeshed.pos(0, i), dataAllRemeshed.pos(1, i), dataAllRemeshed.pos(2, i));
+    }
+    fprintf(fw, "))\n");
+
+    /*Writing individual sections for colors*/
+    for (auto c2s = color2section.begin(); c2s != color2section.end(); c2s++)
+    {
+
+        vSize = c2s->second.size();
+        fprintf(fw, "(13 (%d %x %x 3 3)\n(\n", c2s->first + 1, count, count - 1 + vSize);
+        for (unsigned int i = 0; i < vSize; i++)
+        {
+            fprintf(fw, "%x %x %x 0 0\n", dataAllRemeshed.connectM(0, c2s->second[i]) + 1, dataAllRemeshed.connectM(1, c2s->second[i]) + 1,
+                    dataAllRemeshed.connectM(2, c2s->second[i]) + 1);
+        }
+        fprintf(fw, "))\n");
+        count += vSize;
+    }
+
+    /*Defining the min_size , max_size and growth_rate */
+    double min_size = m_meshConstruction->getMinEdgeLength();
+    double max_size = m_meshConstruction->cm2TetmeshSettings().target_metric;
+    double growth_rate = 1 + m_meshConstruction->cm2TetmeshSettings().max_gradation;
+
+    /*Appending them to the pmdat */
+    fprintf(fw, "\n(60 (\n(size-func/global-params (%lf %lf %lf 2.0))\n ))\n", min_size, max_size, growth_rate);
+
+    /*closing the file */
+    fclose(fw);
+}
