[{"objectID":"Home","href":"autoapi/review/bot/cli/index.html#reviewbotcli","title":"review.bot.cli","text":"review.bot.cli\n\n\n\nModule for CLI interface."},{"objectID":"Home","href":"autoapi/review/bot/cli/index.html#submodules","title":"review.bot.cli > Submodules","text":"Submodules\n\n"},{"objectID":"Home","href":"autoapi/review/bot/schema/index.html#reviewbotschema","title":"review.bot.schema","text":"review.bot.schema\n\n\n\nModule for managing JSON resources."},{"objectID":"Home","href":"autoapi/review/bot/schema/index.html#submodules","title":"review.bot.schema > Submodules","text":"Submodules\n\n"},{"objectID":"Home","href":"autoapi/review/bot/exceptions/index.html#reviewbotexceptions","title":"review.bot.exceptions","text":"review.bot.exceptions\n\n\n\nModule for exceptions."},{"objectID":"Home","href":"autoapi/review/bot/exceptions/index.html#exceptions","title":"review.bot.exceptions > Exceptions","text":"Exceptions\n\n"},{"objectID":"Home","href":"autoapi/review/bot/exceptions/index.html#module-contents","title":"review.bot.exceptions > Module Contents","text":"Module Contents\n\n\n\nexception review.bot.exceptions.ValidationErrorException(message: str = 'Output message from LLM is not properly formed.', llm_output: str = None)\n\nBases: Exception\n\nException class for LLM format errors.\n\nParameters\n\nmessage\n\npython:str, optional\n\nMessage to be raised, by default “Output message from LLM is not properly formed.”.\n\nllm_output\n\npython:str, optional\n\nRaw output from the LLM, by default None.\n\n\n\nmessage = 'Output message from LLM is not properly formed.'\n\n\n\n\n\nexception review.bot.exceptions.EmptyOpenAIResponseException(message: str = 'The response from OpenAI is empty.')\n\nBases: Exception\n\nException class for OpenAI empty responses.\n\nParameters\n\nmessage\n\npython:str, optional\n\nMessage to be raised, by default “The response from OpenAI is empty.”.\n\n\n\nmessage = 'The response from OpenAI is empty.'\n\n"},{"objectID":"Home","href":"autoapi/review/bot/misc/index.html#reviewbotmisc","title":"review.bot.misc","text":"review.bot.misc\n\n\n\nMiscellaneous functions."},{"objectID":"Home","href":"autoapi/review/bot/misc/index.html#attributes","title":"review.bot.misc > Attributes","text":"Attributes\n\n"},{"objectID":"Home","href":"autoapi/review/bot/misc/index.html#functions","title":"review.bot.misc > Functions","text":"Functions\n\n"},{"objectID":"Home","href":"autoapi/review/bot/misc/index.html#module-contents","title":"review.bot.misc > Module Contents","text":"Module Contents\n\n\n\nreview.bot.misc.LOG\n\n\n\n\n\nreview.bot.misc.get_client(config_file: str = None) -> openai.OpenAI | openai.AzureOpenAI\n\nGet the OpenAI client with the configuration file initialization.\n\nParameters\n\nconfig_file\n\npython:str, optional\n\nInitialization parameters of the client, by default None.\n\nReturns\n\nUnion[OpenAI, AzureOpenAI]\n\nInitialized OpenAI client.\n\nRaises\n\nOSError\n\nThrown if access token is missing.\n\n\n\nreview.bot.misc.open_logger(loglevel='DEBUG', formatstr='%(name)-20s - %(levelname)-8s - %(message)s')\n\nStart logging to standard output.\n\nParameters\n\nloglevel\n\npython:str, optional\n\nStandard logging level. One of the following:\n\n\"DEBUG\" (default)\n\n\"INFO\"\n\n\"WARNING\"\n\n\"ERROR\"\n\n\"CRITICAL\"\n\nformatstr\n\npython:str, optional\n\nFormat string.  See logging.Formatter.\n\nReturns\n\nlogging.RootLogger\n\nRoot logging object.\n\nExamples\n\nOutput logging to stdout at the 'INFO' level.\n\n>>> import review.bot as review_bot\n>>> review_bot.open_logger('INFO')\n\n\n\nreview.bot.misc.add_line_numbers(patch)\n\nAdd line numbers to the added lines in a given patch string.\n\nThe function takes a patch string and adds line numbers to the lines that\nstart with a ‘+’. It returns a new patch string with added line numbers.\nLine numbers are added immediately to the left of any ‘+’.\n\nParameters\n\npatch\n\npython:str\n\nThe patch string containing the changes in the file.\n\nReturns\n\npython:str\n\nThe modified patch string with line numbers added to the added lines.\n\nExamples\n\n>>> patch = '''@@ -1,3 +1,5 @@\n... +from itertools import permutations\n... +\n... import numpy as np\n... import pytest'''\n>>> add_line_numbers(patch)\n'@@ -1,3 +1,5 @@\n1   +from itertools import permutations\n... +\n... import numpy as np\n... import pytest'\n\n\n\nreview.bot.misc.clean_string(input_text: str)\n\nClean type and lines strings.\n\nClean type and lines strings in the LLM output, in\ncase some unwanted characters are mixed with the desired\ncontent.\n\nParameters\n\ninput_text\n\npython:str\n\nRaw text from the LLM.\n\nReturns\n\npython:str\n\nCleaned text.\n\n\n\nreview.bot.misc.clean_content(raw_content: List, text_block=None)\n\nJoin the list of the content.\n\nJoin the list of the content, that might be split\ndue to preprocessing, and cleans starting commas if they appear.\n\nParameters\n\nraw_content\n\npython:list\n\nList with the content of the suggestion.\n\nReturns\n\npython:str\n\nContent processed.\n\n\n\nreview.bot.misc.parse_suggestions(text_block: str)\n\nParse a given text block containing suggestions.\n\nReturns a list of dictionaries with keys: filename, lines, type, and text.\n\nParameters\n\ntext_block\n\npython:str\n\nThe text block containing suggestions.\n\nReturns\n\npython:list of python:dict\n\nA list of dictionaries containing information about each suggestion.\n\nExamples\n\n>>> tblock = '''\n... [tests/test_geometric_objects.py], [259-260], [SUGGESTION]: Replace `Rectangle` with `Quadrilateral` for clarity and consistency with the name of the class being tested.\n... '''\n>>> parse_suggestions(tblock)\n[{'filename': 'tests/test_geometric_objects.py', 'lines': '259-260', 'type': 'SUGGESTION', 'text': 'Replace `Rectangle` with `Quadrilateral` for clarity and consistency with the name of the class being tested.'}]"},{"objectID":"Home","href":"autoapi/review/bot/gh_interface/index.html#reviewbotgh_interface","title":"review.bot.gh_interface","text":"review.bot.gh_interface\n\n\n\nContains functions to interface with GitHub."},{"objectID":"Home","href":"autoapi/review/bot/gh_interface/index.html#attributes","title":"review.bot.gh_interface > Attributes","text":"Attributes\n\n"},{"objectID":"Home","href":"autoapi/review/bot/gh_interface/index.html#functions","title":"review.bot.gh_interface > Functions","text":"Functions\n\n"},{"objectID":"Home","href":"autoapi/review/bot/gh_interface/index.html#module-contents","title":"review.bot.gh_interface > Module Contents","text":"Module Contents\n\n\n\nreview.bot.gh_interface.LOG\n\n\n\n\n\nreview.bot.gh_interface.get_changed_files_and_contents(owner, repo, pull_number, gh_access_token=None)\n\nRetrieve the filenames, status, and contents of files changed in a GitHub PR.\n\nParameters\n\nowner\n\npython:str\n\nThe owner of the repository where the pull request was made.\n\nrepo\n\npython:str\n\nThe name of the repository where the pull request was made.\n\npull_number\n\npython:int\n\nThe number of the pull request to retrieve the changed files for.\n\ngh_access_token\n\npython:str, optional\n\nGitHub token needed to communicate with the repository. By default, None,\nwhich means it will try to read an existing env variable named GITHUB_TOKEN.\n\nReturns\n\npython:list[python:dict]\n\nA list of dictionaries, where each dictionary represents a file that\nwas changed in the pull request. The dictionary contains the following\nkeys:\n\nfilename: str, the name of the file\n\nstatus: str, the status of the file change (‘added’, ‘modified’, or ‘removed’)\n\nfile_text: str, the contents of the file as a string\n\nRaises\n\nRuntimeError\n\nIf an error occurs while fetching the file content.\n\nNotes\n\nThis function uses the GitHub API to retrieve the list of changed files in\na pull request, along with the contents of each changed file. It requires a\nGitHub access token with appropriate permissions to access the repository."},{"objectID":"Home","href":"autoapi/review/bot/git_interface/index.html#reviewbotgit_interface","title":"review.bot.git_interface","text":"review.bot.git_interface\n\n\n\nInterface module for local GIT files."},{"objectID":"Home","href":"autoapi/review/bot/git_interface/index.html#attributes","title":"review.bot.git_interface > Attributes","text":"Attributes\n\n"},{"objectID":"Home","href":"autoapi/review/bot/git_interface/index.html#classes","title":"review.bot.git_interface > Classes","text":"Classes\n\n"},{"objectID":"Home","href":"autoapi/review/bot/git_interface/index.html#module-contents","title":"review.bot.git_interface > Module Contents","text":"Module Contents\n\n\n\nreview.bot.git_interface.LOG\n\n\n\n\n\nclass review.bot.git_interface.LocalGit(repo_path: str)\n\nClass to extract information from a diff in a local repository.\n\nParameters\n\nrepo_path\n\npython:str\n\nPath to the local repository.\n\n\n\nget_filenames()\n\nGet the filenames of the diff files.\n\nReturns\n\npython:list\n\nList with the filenames.\n\n\n\nget_local_patch()\n\nProcess the raw diff to extract the filename and useful info.\n\nReturns\n\nDict\n\nDict with the file name as key and the diff as content.\n\n\n\nchange_branch(branch_name: str)\n\nSwitch the branch of the repo to the required one.\n\nParameters\n\nbranch_name\n\npython:str\n\nBranch to switch to.\n\n\n\nget_file_sources()\n\nGet the text from the code files of the diff.\n\nReturns\n\nDict\n\nDict with the file name as key and the source file as content."},{"objectID":"Home","href":"autoapi/review/bot/schema/schema/index.html#reviewbotschemaschema","title":"review.bot.schema.schema","text":"review.bot.schema.schema\n\n\n\nModule for JSON validation purposes."},{"objectID":"Home","href":"autoapi/review/bot/schema/schema/index.html#functions","title":"review.bot.schema.schema > Functions","text":"Functions\n\n"},{"objectID":"Home","href":"autoapi/review/bot/schema/schema/index.html#module-contents","title":"review.bot.schema.schema > Module Contents","text":"Module Contents\n\n\n\nreview.bot.schema.schema.validate_output(output: List, schema_path: str = None)\n\nValidate the output from the LLM with the given schema.\n\nParameters\n\noutput\n\npython:list\n\nFormatted output from LLM results.\n\nschema_path\n\npython:str, optional.\n\nJSON schema file path to validate against. By default, None,\nwhich falls back to the implemented schema inside the package.\n\nReturns\n\nbool\n\n"},{"objectID":"Home","href":"autoapi/review/bot/index.html#reviewbot","title":"review.bot","text":"review.bot\n\n\n\nOpenAI LLM powered Review-bot."},{"objectID":"Home","href":"autoapi/review/bot/index.html#submodules","title":"review.bot > Submodules","text":"Submodules\n\n"},{"objectID":"Home","href":"autoapi/review/bot/index.html#attributes","title":"review.bot > Attributes","text":"Attributes\n\n"},{"objectID":"Home","href":"autoapi/review/bot/index.html#package-contents","title":"review.bot > Package Contents","text":"Package Contents\n\n\n\nreview.bot.__version__\n\n"},{"objectID":"Home","href":"autoapi/index.html#api-reference","title":"API reference","text":"API reference\n\nThis page contains the review-bot API reference.\n\n"},{"objectID":"Home","href":"index.html#review-bot","title":"Review Bot","text":"Review Bot\n\n     \n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"index.html#overview","title":"Review Bot > Overview","text":"Overview\n\nThe review-bot package is a Python development tool for leveraging\nthe power of OpenAI to automatically generate suggestions for improving\nGitHub pull requests. To generate suggestions for improvements, this tool\nconsiders code style, logical errors, and other possible issues. Using\nthis tool makes the code review process smoother and more efficient,\nensuring that your code base is high quality, easy to maintain, and\nadheres to best practices.\n\nInstall the review-bot package with this command:"},{"objectID":"Home","href":"index.html#installation","title":"Review Bot > Installation","text":"Installation\n\nTwo installation modes are provided: user and developer."},{"objectID":"Home","href":"index.html#for-users","title":"Review Bot > For users","text":"For users\n\nFirst, to make sure that you have the latest version of pip,\nrun this command:\n\nThen, to install the review-bot package, run this command:"},{"objectID":"Home","href":"index.html#token-configuration","title":"Review Bot > Token configuration","text":"Token configuration\n\nTo use this tool to review GitHub pull requests, you must have two tokens for\naccessing the bot functionalities:\n\nGitHub access token\n\nAzure OpenAI token\n\nSubsequent sections explain how to obtain these tokens and set them up for your project.\n\nEnsure that you keep your tokens confidential and do not share them publicly. Additionally,\nalways follow the best security practices to protect your project and data from unauthorized\naccess."},{"objectID":"Home","href":"index.html#github-access-token","title":"Review Bot > GitHub access token","text":"GitHub access token\n\nA GitHub access token is required to access the GitHub API for certain features, such as\nquerying repositories, creating issues, and managing pull requests.\n\nTo obtain a GitHub access token, perform these steps:\n\nCreate a GitHub account: If you do not already have a GitHub account, sign up for one\nat https://github.com/signup.\n\nGenerate a PAT (personal access token): After signing into your GitHub account, go to\nPersonal access tokens (classic) in your GitHub\ndeveloper settings and click the Generate a personal access token link. Follow\nthe prompts to configure your new token, choosing the scope of access required based on\nyour project’s needs.\n\nCopy the token: After creating the token, GitHub displays it only once. Make sure\nthat you copy the token to a secure location because you are not able to see it again.\n\nSet the token as an environment variable: To use the project with your GitHub access\ntoken, set the token as an environment variable having this name: GITHUB_TOKEN."},{"objectID":"Home","href":"index.html#azure-openai-token","title":"Review Bot > Azure OpenAI token","text":"Azure OpenAI token\n\nThe Azure OpenAI token is required to access the OpenAI API for utilizing the advanced AI\ncapabilities provided by Microsoft Azure.\n\nTo obtain an Azure OpenAI token, perform these steps:\n\nSign up for Azure: If you do not already have an Azure account, sign up for a free\naccount at https://azure.com/free.\n\nCreate an OpenAI resource: Once you have an Azure account, create an OpenAI resource\nin the Azure portal. This resource provides you with the necessary credentials to access\nthe OpenAI API.\n\nCopy the token: After creating the resource, Azure sends you a token (key) that\ngrants you access to the OpenAI services. Make sure that you copy this token to a\nsecure location.\n\nSet the token as an environment variable: To use the project with your Azure OpenAI\ntoken, set the token as an environment variable having this name: OPEN_AI_TOKEN."},{"objectID":"Home","href":"index.html#additional-required-environment-variables","title":"Review Bot > Additional required environment variables","text":"Additional required environment variables\n\nIn addition to setting up environment variables for the GitHub access token and Azure OpenAI\ntoken, you must set up some additional environment variables to customize the behavior of the\nOpenAI project. The following variables allow you to fine tune various aspects of the OpenAI\nmodel and the OpenAI API integration.\n\nOPENAI_API_BASE\n\nDescription: Specifies the base URL of the OpenAI Azure API. This environment variable\nallows you to set the API endpoint for making requests to the OpenAI services.\n\nExample: https://your-api-name.openai.azure.com\n\nOPENAI_API_TYPE\n\nDescription: Defines the type of the OpenAI API. This environment variable is used to\nspecify that you are using the Azure version of OpenAI.\n\nExample: azure\n\nOPENAI_API_VERSION\n\nDescription: Indicates the version of the OpenAI API to use. This environment variable\nensures compatibility with the specific version of the AI model.\n\nExample: 2023-05-15\n\nOPENAI_MODEL\n\nDescription: Allows you to select a particular AI model or engine provided by your\nAzure OpenAI deployment. You can check your deployment to see the names of your models.\nDifferent models may have varying capabilities and performance.\n\nExample: gpt-3.5-turbo-france or text-davinci-002\n\nWith all these environment variables properly configured, you are ready to leverage the full\npotential of the review bot.\n\nOptionally, if you are using the review bot through CLI locally, you can set the Azure OpenAI\nvariables in a JSON configuration file as per this example:"},{"objectID":"Home","href":"index.html#cli-usage","title":"Review Bot > CLI usage","text":"CLI usage\n\nTo use the CLI (command-line interface) of the review bot, run this command:"},{"objectID":"Home","href":"index.html#pre-commit","title":"Review Bot > pre-commit","text":"pre-commit\n\nThe style checks take advantage of pre-commit. Developers are encouraged to\ninstall this tool by running this command:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"autoapi/review/bot/defaults/index.html#reviewbotdefaults","title":"review.bot.defaults","text":"review.bot.defaults\n\n\n\nDefault variables for the project."},{"objectID":"Home","href":"autoapi/review/bot/defaults/index.html#attributes","title":"review.bot.defaults > Attributes","text":"Attributes\n\n"},{"objectID":"Home","href":"autoapi/review/bot/defaults/index.html#module-contents","title":"review.bot.defaults > Module Contents","text":"Module Contents\n\n\n\nreview.bot.defaults.ACCESS_TOKEN\n\nDefault OpenAI token to use.\n\nGet the OpenAI token from the environment variables.\n\n\n\nreview.bot.defaults.API_BASE\n\nDefault URL for OpenAI Azure API.\n\nGet the URL of the OpenAI Azure service from the\nenvironment variables.\n\n\n\nreview.bot.defaults.API_TYPE\n\nDefault OpenAI API type.\n\nGet the type of OpenAI API we are using from the\nenvironment variables.\n\n\n\nreview.bot.defaults.API_MODEL\n\nDefault OpenAI Model to use.\n\nGet the type of OpenAI model we are using from the\nenvironment variables. In Azure dependes on the\nservice you have available.\n\n\n\nreview.bot.defaults.API_VERSION\n\nDefault OpenAI API Azure version we are using.\n\nGet the OpenAI API Azure version from the environment variables.\nYou can check available versions in this link:\nhttps://learn.microsoft.com/en-us/azure/cognitive-services/openai/reference#rest-api-versioning"},{"objectID":"Home","href":"autoapi/review/bot/open_ai_interface/index.html#reviewbotopen_ai_interface","title":"review.bot.open_ai_interface","text":"review.bot.open_ai_interface\n\n\n\nFunctions to interface with OpenAI."},{"objectID":"Home","href":"autoapi/review/bot/open_ai_interface/index.html#attributes","title":"review.bot.open_ai_interface > Attributes","text":"Attributes\n\n"},{"objectID":"Home","href":"autoapi/review/bot/open_ai_interface/index.html#functions","title":"review.bot.open_ai_interface > Functions","text":"Functions\n\n"},{"objectID":"Home","href":"autoapi/review/bot/open_ai_interface/index.html#module-contents","title":"review.bot.open_ai_interface > Module Contents","text":"Module Contents\n\n\n\nreview.bot.open_ai_interface.LOG\n\n\n\n\n\nreview.bot.open_ai_interface.OPEN_AI_MODEL\n\n\n\n\n\nreview.bot.open_ai_interface.review_patch(owner: str, repo: str, pr: int, use_src: bool = False, filter_filename=None, gh_access_token: str = None, docs_only: bool = False, config_file: str = None) -> List[Dict]\n\nReview a patch in a pull request and generate suggestions for improvement.\n\nParameters\n\nowner\n\npython:str\n\nThe GitHub owner/organization of the repository.\n\nrepo\n\npython:str\n\nThe name of the repository on GitHub.\n\npr\n\npython:str\n\nThe pull request number.\n\nuse_src\n\nbool, default: python:False\n\nUse the source file as context for the patch. Works for small files and\nnot for large ones.\n\nfilter_filename\n\npython:str, optional\n\nIf set, filters out all but the file matching this string.\n\ngh_access_token\n\npython:str, optional\n\nGitHub token needed to communicate with the repository. By default, None,\nwhich means it will try to read an existing env variable named GITHUB_TOKEN.\n\nconfig_file\n\npython:str, optional\n\nPath to OpenAI configuration file. By default, None.\n\nReturns\n\n\n\n——-\n\n\n\nlist[dict]\n\nA dictionary containing suggestions for the reviewed patch.\n\n\n\nreview.bot.open_ai_interface.review_folder(owner: str, repo: str, pr: int, folder: str, gh_access_token: str = None, config_file: str = None) -> List[Dict]\n\nReviews an specific file from the PR. The file must have been modified in the PR.\n\nParameters\n\nowner\n\npython:str\n\nThe GitHub owner/organization of the repository.\n\nrepo\n\npython:str\n\nThe name of the repository on GitHub.\n\npr\n\npython:str\n\nThe pull request number.\n\nfolder\n\npython:str\n\nName of the folder you want to review.\n\ngh_access_token\n\npython:str, optional\n\nGitHub token needed to communicate with the repository. By default, None,\nwhich means it will try to read an existing env variable named GITHUB_TOKEN.\n\nconfig_file\n\npython:str, optional\n\nPath to OpenAI configuration file. By default, None.\n\nReturns\n\nList[Dict]\n\nList of dictionaries with the PR suggestions.\n\n\n\nreview.bot.open_ai_interface.review_file(owner: str, repo: str, pr: int, filename: str, gh_access_token: str = None, config_file: str = None) -> List[Dict]\n\nReviews an specific file from the PR. The file must have been modified in the PR.\n\nParameters\n\nowner\n\npython:str\n\nThe GitHub owner/organization of the repository.\n\nrepo\n\npython:str\n\nThe name of the repository on GitHub.\n\npr\n\npython:str\n\nThe pull request number.\n\nfilename\n\npython:str\n\nName of the file you want to review.\n\ngh_access_token\n\npython:str, optional\n\nGitHub token needed to communicate with the repository. By default, None,\nwhich means it will try to read an existing env variable named GITHUB_TOKEN.\n\nconfig_file\n\npython:str, optional\n\nPath to OpenAI configuration file. By default, None.\n\nReturns\n\nList[Dict]\n\nList of dictionaries with the PR suggestions.\n\n\n\nreview.bot.open_ai_interface.review_patch_local(repo: str, branch: str = None, use_src: bool = False, filter_filename: str = None, config_file: str = None) -> List[Dict]\n\nReview a patch in a pull request and generate suggestions for improvement.\n\nParameters\n\nrepo\n\npython:str\n\nThe path to the local repository.\n\nbranch\n\npython:str\n\nName of the branch you want to compare to main. By default, current branch.\n\nuse_src\n\nbool, default: python:False\n\nUse the source file as context for the patch. Works for small files and\nnot for large ones.\n\nfilter_filename\n\npython:str, optional\n\nIf set, filters out all but the file matching this string.\n\nconfig_file\n\npython:str, optional\n\nPath to OpenAI configuration file. By default, None.\n\nReturns\n\npython:list[python:dict]\n\nA dictionary containing suggestions for the reviewed patch.\n\n\n\nreview.bot.open_ai_interface.message_generation(filename: str, patch: str = None, file_src: str = None, docs_only: bool = False) -> str\n\nGenerate the required message for each type of query request.\n\nParameters\n\nfilename\n\npython:str\n\nName of the file being patched.\n\npatch\n\npython:str\n\nThe patch text containing line numbers and changes.\n\nfile_src\n\npython:str\n\nThe source file text including the file name and its contents.\n\ndocs_only: True\n\nFlag to select whether to review the documentation only or not.\n\nReturns\n\npython:list[python:dict]\n\nA list with the messages to send to the LLM.\n\n\n\nreview.bot.open_ai_interface.generate_suggestions(filename, patch=None, file_src=None, config_file: str = None, docs_only=False) -> List[Dict[str, str]]\n\nGenerate suggestions for a given file source and patch.\n\nParameters\n\nfilename\n\npython:str\n\nName of the file being patched.\n\npatch\n\npython:str, optional\n\nThe patch text containing line numbers and changes.\n\nfile_src: str, optional\n\nSource file of the patch.\n\nconfig_file\n\npython:str, optional\n\nPath to OpenAI configuration file. By default, None.\n\ndocs_only: bool, optional\n\nWhether to review documentation only or the whole code. By default False.\n\nReturns\n\n\n\n——-\n\n\n\nlist[dict]\n\nA list of dictionaries containing suggestions for the patch."},{"objectID":"Home","href":"autoapi/review/bot/cli/cli/index.html#reviewbotclicli","title":"review.bot.cli.cli","text":"review.bot.cli.cli\n\n\n\nModule for CLI related code."},{"objectID":"Home","href":"autoapi/review/bot/cli/cli/index.html#functions","title":"review.bot.cli.cli > Functions","text":"Functions\n\n"},{"objectID":"Home","href":"autoapi/review/bot/cli/cli/index.html#module-contents","title":"review.bot.cli.cli > Module Contents","text":"Module Contents\n\n\n\nreview.bot.cli.cli.show_review(args)\n\nShow through command line the review of the diff from the LLM.\n\nParameters\n\nargs\n\nArgs from the command line.\n\n\n\nreview.bot.cli.cli.main()\n\nEntrypoint to execute."}]